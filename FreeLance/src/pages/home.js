import { useState, useEffect } from "react";
import Head from "next/head";
import Header from "@/components/Header";
import ProjectCard from "@/components/ProjectCard";
import Web3Modal from "web3modal";
import { ethers } from "ethers";
import { contractAddress } from "../../blockchain/config";
import JobPortal from "../../blockchain/artifacts/contracts/JobPortal.sol/JobPortal.json";
import axios from "axios";
import { Polybase } from "@polybase/client";

const db = new Polybase({
  defaultNamespace:
    "pk/0x81c580282b4a4d717abbe5609c8d4af106783559f0dd7caa481255a833dfd790cd88723a3ecde173c97ed3fb80be31ccaf85fd50552254b96efc686cace10993/FreeLance",
});
const collectionReference = db.collection("Project");

export default function Home() {
  // On screen load get projects count
  const [projectsData, setProjectsData] = useState([]);

  useEffect(() => {
    async function getProjects() {
      // const dat = await collectionReference.record(1).get();
      // console.log(JSON.stringify(dat.data));

      let projectsArr = [];
      const web3Modal = new Web3Modal();
      const connection = await web3Modal.connect();
      const provider = new ethers.providers.Web3Provider(connection);
      const signer = provider.getSigner();
      const jobPortal = new ethers.Contract(
        contractAddress,
        JobPortal.abi,
        signer
      );
      const cnt = await jobPortal.getCurrentProjectId();
      for (let i = 0; i <= cnt.toNumber(); i++) {
        projectsArr.push(i);
      }

      const data = await Promise.all(
        projectsArr.map(async (p) => {
          const project = await jobPortal.projects(p);
          console.log("project" + project);
          let dbfetch;
          try {
            dbfetch = await collectionReference.record(project[0]).get();
            console.log(JSON.stringify(dbfetch.data));
            const projectObj = {
              uri: project[0],
              id: project[1].toNumber(),
              manager: project[2],
              taskCount: project[3].toNumber(),
              title: dbfetch.data.title,
              skills: dbfetch.data.skills,
              image: dbfetch.data.image,
              duration: dbfetch.data.duration,
              description: dbfetch.data.description,
              category: dbfetch.data.category,
            };
            return projectObj;
          } catch (error) {
            console.log(error);
          }
        })
      );
      console.log(data);
      // remove undefined values
      const filteredData = data.filter((d) => d !== undefined);
      setProjectsData(filteredData);
      console.log(filteredData);
    }
    getProjects();
  }, []);

  return (
    <>
      <Head>
        <title>FreeLance</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <section className="bg-black text-white pb-10 px-10">
        <div className="max-w-5xl mx-auto">
          <h1 className="text-2xl font-semibold my-10 md:ml-5">
            Explore Projects
          </h1>
          {/* run loop from 0 to project count and get project details */}
          {/* {projectsData.length ? <p>{JSON.stringify(projectsData[0][2])}</p> : <p>loading</p>} */}
          {/* {JSON.stringify(projectsData[0][1].toNumber())} */}

          {projectsData.map((p, index) => (
            <ProjectCard key={index} project={p} />
          ))}
        </div>
      </section>
    </>
  );
}
